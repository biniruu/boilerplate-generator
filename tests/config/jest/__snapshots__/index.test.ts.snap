// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`For jest.config.ts should return the configuration that has no selected options 1`] = `
"/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
    
module.exports = {
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: './coverage',
  moduleDirectories: [
    './node_modules',
    './src'
  ],
  moduleNameMapper: {
    '@app/(.*)': './src/app/$1',
    '\\\\.(css|scss)$': 'identity-obj-proxy'
  },
  reporters: [
    'default'
  ],
  rootDir: '.',
  roots: [
    'tests'
  ],
  setupFilesAfterEnv: [
    './jest.setup.js',
    'jest-extended/all'
  ],
  testEnvironment: 'jest-environment-jsdom',
  testMatch: [
    '**/tests/**/*.[jt]s?(x)',
    '**/__tests__/**/*.[jt]s?(x)',
    '**/?(*.)+(spec|test).[tj]s?(x)'
  ],
  testPathIgnorePatterns: [
    './node_modules/'
  ],
  transform: {
    '^.+\\\\.(js|jsx)$': 'babel-jest'
  },
  verbose: true
}"
`;

exports[`For jest.config.ts should return the configuration with Jest HTML Reporters 1`] = `
"/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
    
module.exports = {
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: './coverage',
  moduleDirectories: [
    './node_modules',
    './src'
  ],
  moduleNameMapper: {
    '@app/(.*)': './src/app/$1',
    '\\\\.(css|scss)$': 'identity-obj-proxy'
  },
  reporters: [
    'default',
    'jest-html-reporters'
  ],
  rootDir: '.',
  roots: [
    'tests'
  ],
  setupFilesAfterEnv: [
    './jest.setup.js',
    'jest-extended/all'
  ],
  testEnvironment: 'jest-environment-jsdom',
  testMatch: [
    '**/tests/**/*.[jt]s?(x)',
    '**/__tests__/**/*.[jt]s?(x)',
    '**/?(*.)+(spec|test).[tj]s?(x)'
  ],
  testPathIgnorePatterns: [
    './node_modules/'
  ],
  transform: {
    '^.+\\\\.(js|jsx)$': 'babel-jest'
  },
  verbose: true
}"
`;

exports[`For jest.config.ts should return the configuration with Lodash 1`] = `
"/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
    
module.exports = {
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: './coverage',
  moduleDirectories: [
    './node_modules',
    './src'
  ],
  moduleNameMapper: {
    '@app/(.*)': './src/app/$1',
    '\\\\.(css|scss)$': 'identity-obj-proxy',
    'lodash-es': 'lodash'
  },
  reporters: [
    'default'
  ],
  rootDir: '.',
  roots: [
    'tests'
  ],
  setupFilesAfterEnv: [
    './jest.setup.js',
    'jest-extended/all'
  ],
  testEnvironment: 'jest-environment-jsdom',
  testMatch: [
    '**/tests/**/*.[jt]s?(x)',
    '**/__tests__/**/*.[jt]s?(x)',
    '**/?(*.)+(spec|test).[tj]s?(x)'
  ],
  testPathIgnorePatterns: [
    './node_modules/'
  ],
  transform: {
    '^.+\\\\.(js|jsx)$': 'babel-jest'
  },
  verbose: true
}"
`;

exports[`For jest.config.ts should return the configuration with Next.js 1`] = `
"/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
    
module.exports = {
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: './coverage',
  moduleDirectories: [
    './node_modules',
    './src'
  ],
  moduleNameMapper: {
    '@app/(.*)': './src/app/$1',
    '\\\\.(css|scss)$': 'identity-obj-proxy'
  },
  reporters: [
    'default'
  ],
  rootDir: '.',
  roots: [
    'tests'
  ],
  setupFilesAfterEnv: [
    './jest.setup.js',
    'jest-extended/all'
  ],
  testEnvironment: 'jest-environment-jsdom',
  testMatch: [
    '**/tests/**/*.[jt]s?(x)',
    '**/__tests__/**/*.[jt]s?(x)',
    '**/?(*.)+(spec|test).[tj]s?(x)'
  ],
  testPathIgnorePatterns: [
    './node_modules/',
    './.next/'
  ],
  transform: {
    '^.+\\\\.(js|jsx)$': 'babel-jest'
  },
  verbose: true
}"
`;

exports[`For jest.config.ts should return the configuration with Next.js and TypeScript 1`] = `
"import type { JestConfigWithTsJest } from 'ts-jest'

import 'jest-extended'
    
const jestConfig: JestConfigWithTsJest = {
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: './coverage',
  moduleDirectories: [
    './node_modules',
    './src'
  ],
  moduleNameMapper: {
    '@app/(.*)': './src/app/$1',
    '\\\\.(css|scss)$': 'identity-obj-proxy'
  },
  preset: 'ts-jest',
  reporters: [
    'default'
  ],
  rootDir: '.',
  roots: [
    'tests'
  ],
  setupFilesAfterEnv: [
    './jest.setup.ts',
    'jest-extended/all'
  ],
  testEnvironment: 'jest-environment-jsdom',
  testMatch: [
    '**/tests/**/*.[jt]s?(x)',
    '**/__tests__/**/*.[jt]s?(x)',
    '**/?(*.)+(spec|test).[tj]s?(x)'
  ],
  testPathIgnorePatterns: [
    './node_modules/',
    './.next/'
  ],
  transform: {
    '^.+\\\\.(ts|tsx)$': [
      'ts-jest',
      {
        tsconfig: './tsconfig.test.json'
      }
    ]
  },
  verbose: true
}

export default jestConfig"
`;

exports[`For jest.config.ts should return the configuration with TypeScript 1`] = `
"import type { JestConfigWithTsJest } from 'ts-jest'

import 'jest-extended'
    
const jestConfig: JestConfigWithTsJest = {
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: './coverage',
  moduleDirectories: [
    './node_modules',
    './src'
  ],
  moduleNameMapper: {
    '@app/(.*)': './src/app/$1',
    '\\\\.(css|scss)$': 'identity-obj-proxy'
  },
  preset: 'ts-jest',
  reporters: [
    'default'
  ],
  rootDir: '.',
  roots: [
    'tests'
  ],
  setupFilesAfterEnv: [
    './jest.setup.ts',
    'jest-extended/all'
  ],
  testEnvironment: 'jest-environment-jsdom',
  testMatch: [
    '**/tests/**/*.[jt]s?(x)',
    '**/__tests__/**/*.[jt]s?(x)',
    '**/?(*.)+(spec|test).[tj]s?(x)'
  ],
  testPathIgnorePatterns: [
    './node_modules/'
  ],
  transform: {
    '^.+\\\\.(ts|tsx)$': [
      'ts-jest',
      {
        tsconfig: './tsconfig.test.json'
      }
    ]
  },
  verbose: true
}

export default jestConfig"
`;

exports[`For jest.config.ts should return the configuration with Vue.js 1`] = `
"/** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
    
module.exports = {
  clearMocks: true,
  collectCoverage: true,
  coverageDirectory: './coverage',
  moduleDirectories: [
    './node_modules',
    './src'
  ],
  moduleNameMapper: {
    '@app/(.*)': './src/app/$1',
    '\\\\.(css|scss)$': 'identity-obj-proxy'
  },
  reporters: [
    'default'
  ],
  rootDir: '.',
  roots: [
    'tests'
  ],
  setupFilesAfterEnv: [
    './jest.setup.js',
    'jest-extended/all'
  ],
  testEnvironment: 'jest-environment-jsdom',
  testMatch: [
    '**/tests/**/*.[jt]s?(x)',
    '**/__tests__/**/*.[jt]s?(x)',
    '**/?(*.)+(spec|test).[tj]s?(x)'
  ],
  testPathIgnorePatterns: [
    './node_modules/',
    './.next/'
  ],
  transform: {
    '^.+\\\\.(js|jsx)$': 'babel-jest'
  },
  verbose: true
}"
`;
